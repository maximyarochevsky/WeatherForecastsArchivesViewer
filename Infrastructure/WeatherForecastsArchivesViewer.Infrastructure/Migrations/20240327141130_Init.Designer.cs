// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherForecastsArchivesViewer.Infrastructure.Persistence;

#nullable disable

namespace WeatherForecastsArchivesViewer.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240327141130_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecastsArchivesViewer.Domain.Entities.WeatherForecastEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("AirHumidity")
                        .HasColumnType("real")
                        .HasColumnName("air_humidity");

                    b.Property<int>("AtmosphericPressure")
                        .HasColumnType("integer")
                        .HasColumnName("atmospheric_pressure");

                    b.Property<int?>("CloudCover")
                        .HasColumnType("integer")
                        .HasColumnName("cloud_cover");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<float>("DewPoint")
                        .HasColumnType("real")
                        .HasColumnName("dew_point");

                    b.Property<int?>("HorizontalVisibility")
                        .HasColumnType("integer")
                        .HasColumnName("horizontal_visibility");

                    b.Property<int?>("LowerLimitCloudCover")
                        .HasColumnType("integer")
                        .HasColumnName("lower_limit_cloud_cover");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<string>("WeatherEvent")
                        .HasColumnType("text")
                        .HasColumnName("weather_event");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text")
                        .HasColumnName("wind_direction");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id");

                    b.ToTable("weather_forecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
